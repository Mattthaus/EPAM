package DAO;

import java.io.IOException;
import java.util.Hashtable;
import java.util.Optional;

//шаблонный интерфейс основного функционала для работы с данными, принимающий 2 параметра
//K - тип ключа для поиска объектов, T - тип объектов
public interface DAO<K, T> {

    //нереализованный шаблонный метод, возвращающий объект класса Optional по переданному ключу(key)
    //может стать объектом любого класса через параметр шаблона<T>
    Optional<T> get(K key);

    //нереализованный метод, возвращающий структуру типа Hashtable(ключ, значение), в которой хранятся все данные
    Hashtable<K, T> getAll();

    //нереализованный метод, сохраняющий все объекты данных, может выбросить исключение(ошибку ввода, вывода)
    void save() throws IOException;

    //нереализованный метод, добавляющий новый объект данных(obj), может выбросить исключение(ошибку ввода, вывода)
    void add(T obj) throws IOException;

    //нереализованный метод, обновляющий старый объект данных на новый, может выбросить исключение(ошибку ввода, вывода)
    //obj - новый объект данных, key - ключ старого объекта
    void update (T obj, K key) throws IOException;

    //нереализованный метод, удаляющий объект данных по ключу(key), может выбросить исключение(ошибку ввода, вывода)
    void delete(K key) throws IOException;
}
